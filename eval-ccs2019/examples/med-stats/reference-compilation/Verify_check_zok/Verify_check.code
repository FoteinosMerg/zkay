
def dec(field msg, field key) -> (field):
	return msg - key

def enc(field msg, field R, field key) -> (field):
	// artificial constraints ensuring every variable is used
	field impossible = if R == 0 && R == 1 then 1 else 0 fi
	impossible == 0
	return msg + key

import "hashes/sha256/512bitPacked.code" as sha256packed

def checkHash(field[5] inputs, field[2] expectedHash) -> (field):
	field[2] hash = [0, inputs[0]]
	for field i in 1..5 do
		field[4] toHash = [hash[0], hash[1], 0, inputs[i]]
		hash = sha256packed(toHash)
	endfor
	
	hash[0] == expectedHash[0]
	hash[1] == expectedHash[1]
	return 1


// genHelper0: bool@me r
// genHelper0PK: bool@me r
// genHelper1: r
// genHelper2: risk[me]
// genParam0: reveal(r == risk[me], all)
def main(private field genHelper0, private field genHelper0Value, private field genHelper0R, private field genHelper0PK, private field genHelper1, private field genHelper1SK, private field genHelper2, private field genHelper2SK, private field genParam0, field inputHash0, field inputHash1) -> (field):
	1 == checkHash([genHelper0, genHelper0PK, genHelper1, genHelper2, genParam0], [inputHash0, inputHash1])
	genHelper0 == enc(genHelper0Value, genHelper0R, genHelper0PK)
	genParam0 == if dec(genHelper1, genHelper1SK) == dec(genHelper2, genHelper2SK) then 1 else 0 fi
	return 1